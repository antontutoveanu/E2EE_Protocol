// imports
const { performance } = require('perf_hooks');
const kyber1024 = require("./kyber1024");
const fs = require('fs');

// server's hardcoded KYBER PUBLIC_KEY (persistent) 
const PUBLIC_KEY = [46, 170, 89, 43, 248, 36, 15, 83, 78, 166, 208, 116, 85, 80, 16, 210, 7, 81, 22, 81, 81, 190, 250, 86, 232, 197, 39, 47, 129, 22, 71, 19, 63, 8, 58, 42, 30, 119, 96, 95, 
    91, 83, 174, 176, 28, 214, 179, 132, 225, 73, 117, 149, 137, 127, 71, 23, 61, 212, 139, 64, 234, 183, 172, 64, 16, 137, 193, 26, 78, 97, 117, 39, 108, 153, 123, 190, 188, 92, 53, 241, 
    197, 109, 155, 48, 91, 42, 82, 159, 147, 196, 231, 102, 154, 144, 201, 133, 116, 234, 95, 108, 88, 17, 129, 219, 187, 63, 247, 152, 199, 27, 172, 234, 39, 60, 179, 156, 76, 186, 17, 23, 
    36, 153, 124, 203, 204, 14, 99, 185, 144, 187, 6, 165, 56, 39, 117, 28, 66, 14, 185, 196, 174, 180, 176, 178, 101, 197, 128, 178, 249, 147, 71, 84, 184, 169, 124, 133, 176, 216, 141, 186, 
    162, 138, 136, 49, 56, 75, 82, 3, 194, 21, 20, 217, 136, 176, 234, 116, 9, 252, 243, 39, 51, 226, 79, 136, 23, 201, 113, 183, 182, 91, 2, 56, 170, 27, 195, 140, 57, 170, 89, 43, 187, 214, 
    162, 28, 221, 103, 70, 102, 203, 59, 228, 133, 70, 208, 220, 117, 63, 98, 160, 249, 135, 101, 94, 115, 107, 249, 59, 156, 168, 246, 165, 96, 241, 74, 234, 150, 80, 94, 146, 72, 54, 166, 
    100, 105, 227, 117, 111, 252, 62, 71, 36, 48, 219, 139, 187, 175, 91, 31, 213, 1, 47, 216, 118, 88, 219, 198, 118, 51, 123, 87, 143, 138, 150, 84, 12, 122, 161, 44, 59, 245, 219, 147, 
    106, 16, 117, 198, 34, 189, 45, 20, 81, 78, 246, 91, 44, 84, 142, 180, 119, 43, 141, 100, 151, 157, 132, 80, 99, 148, 63, 17, 85, 35, 17, 178, 38, 152, 7, 198, 37, 137, 179, 94, 172, 145, 
    140, 169, 1, 108, 8, 43, 19, 104, 187, 251, 136, 181, 208, 170, 55, 94, 9, 76, 94, 133, 200, 178, 12, 173, 174, 10, 133, 176, 192, 68, 39, 167, 90, 202, 64, 93, 51, 137, 132, 171, 22, 
    110, 71, 185, 181, 238, 214, 85, 208, 51, 135, 65, 37, 203, 20, 167, 82, 196, 33, 31, 239, 118, 81, 179, 220, 79, 40, 184, 177, 53, 84, 48, 91, 154, 196, 52, 243, 153, 161, 139, 206, 58, 
    84, 146, 253, 165, 204, 6, 66, 105, 228, 214, 48, 89, 59, 75, 69, 42, 81, 56, 48, 147, 96, 97, 94, 246, 33, 112, 67, 68, 13, 168, 161, 84, 225, 215, 38, 80, 60, 171, 78, 118, 142, 46, 56, 
    115, 105, 166, 42, 27, 57, 6, 152, 4, 1, 94, 22, 189, 61, 242, 86, 93, 217, 168, 33, 17, 102, 150, 245, 142, 210, 88, 159, 12, 217, 139, 71, 200, 36, 78, 226, 142, 120, 210, 28, 123, 227, 
    50, 191, 101, 24, 104, 169, 145, 46, 72, 172, 202, 196, 26, 98, 182, 194, 132, 186, 45, 104, 23, 132, 106, 105, 43, 157, 165, 64, 125, 185, 129, 56, 179, 57, 121, 68, 151, 236, 146, 122, 
    50, 122, 133, 164, 160, 182, 111, 0, 205, 147, 122, 84, 128, 35, 128, 221, 5, 30, 145, 184, 112, 15, 147, 115, 153, 8, 118, 4, 182, 161, 80, 147, 96, 70, 11, 29, 115, 251, 184, 234, 212, 
    114, 29, 104, 185, 180, 186, 171, 150, 92, 37, 211, 11, 177, 223, 161, 140, 99, 120, 27, 175, 75, 148, 167, 152, 36, 191, 152, 62, 139, 41, 114, 56, 212, 142, 194, 116, 141, 139, 224, 
    109, 202, 166, 197, 83, 21, 116, 97, 98, 37, 158, 219, 61, 195, 57, 53, 71, 32, 154, 155, 123, 147, 66, 44, 173, 69, 123, 101, 71, 107, 7, 197, 215, 14, 152, 160, 98, 204, 106, 141, 140, 
    241, 176, 23, 64, 9, 112, 153, 1, 63, 9, 29, 235, 224, 137, 93, 182, 39, 131, 21, 14, 202, 166, 150, 207, 23, 207, 146, 228, 38, 87, 236, 159, 250, 98, 175, 199, 67, 50, 5, 118, 88, 128, 
    231, 148, 104, 151, 118, 107, 231, 30, 79, 44, 12, 95, 2, 110, 39, 242, 91, 46, 83, 157, 13, 135, 133, 78, 154, 91, 122, 76, 126, 155, 169, 205, 63, 52, 154, 150, 178, 184, 250, 103, 80, 
    184, 67, 102, 152, 227, 59, 170, 83, 70, 188, 27, 50, 208, 16, 191, 238, 66, 134, 8, 108, 17, 222, 161, 198, 180, 149, 8, 228, 163, 109, 251, 181, 105, 102, 243, 90, 191, 50, 116, 92, 
    103, 74, 185, 153, 105, 155, 129, 52, 228, 67, 23, 227, 133, 15, 244, 236, 30, 176, 112, 85, 88, 49, 199, 227, 82, 183, 113, 121, 135, 137, 224, 145, 189, 231, 118, 72, 244, 77, 101, 53, 
    154, 137, 163, 189, 165, 165, 83, 108, 154, 183, 139, 186, 37, 70, 167, 0, 255, 11, 202, 126, 88, 186, 175, 102, 185, 224, 50, 150, 229, 199, 51, 206, 211, 111, 88, 209, 171, 63, 124, 
    192, 91, 193, 112, 149, 183, 31, 183, 65, 112, 14, 131, 152, 181, 169, 49, 41, 242, 151, 87, 32, 198, 32, 50, 149, 168, 70, 142, 171, 160, 181, 78, 247, 103, 13, 104, 72, 177, 80, 24, 
    241, 150, 200, 24, 130, 24, 194, 117, 148, 4, 68, 51, 2, 198, 188, 30, 55, 44, 255, 151, 125, 138, 128, 193, 237, 119, 12, 138, 22, 108, 230, 201, 152, 212, 216, 118, 188, 86, 96, 222, 
    24, 18, 76, 56, 51, 235, 105, 55, 195, 38, 176, 94, 177, 22, 9, 135, 11, 254, 149, 192, 95, 230, 26, 249, 217, 75, 64, 117, 11, 142, 66, 83, 70, 118, 71, 122, 171, 148, 193, 138, 81, 
    180, 219, 111, 92, 168, 113, 13, 34, 187, 70, 211, 170, 109, 150, 158, 166, 11, 108, 13, 185, 106, 235, 67, 185, 107, 98, 62, 245, 202, 73, 7, 168, 92, 112, 219, 45, 202, 60, 197, 45, 
    10, 194, 45, 50, 51, 171, 12, 200, 124, 192, 44, 226, 124, 90, 194, 179, 185, 12, 226, 139, 49, 216, 206, 59, 181, 205, 3, 131, 136, 179, 81, 120, 27, 51, 97, 199, 213, 196, 22, 82, 
    62, 13, 160, 99, 3, 228, 99, 251, 91, 118, 200, 144, 40, 126, 197, 130, 125, 202, 153, 16, 144, 184, 87, 97, 173, 91, 1, 141, 177, 12, 34, 190, 128, 123, 162, 146, 45, 155, 128, 70, 
    130, 139, 153, 240, 177, 68, 144, 192, 138, 149, 43, 85, 251, 217, 198, 181, 97, 21, 124, 153, 155, 61, 155, 8, 189, 154, 42, 95, 33, 203, 64, 21, 207, 250, 155, 158, 97, 69, 169, 
    67, 49, 23, 216, 165, 108, 180, 11, 79, 32, 234, 45, 248, 166, 189, 224, 76, 130, 183, 107, 66, 199, 34, 106, 35, 247, 33, 204, 67, 153, 195, 177, 147, 130, 104, 152, 67, 201, 4, 
    60, 145, 64, 61, 116, 170, 143, 196, 3, 45, 214, 93, 228, 133, 203, 143, 197, 41, 155, 226, 124, 138, 140, 135, 254, 131, 1, 9, 146, 124, 152, 171, 34, 100, 185, 175, 24, 163, 178, 
    157, 102, 12, 226, 212, 180, 106, 7, 208, 199, 150, 98, 150, 192, 164, 203, 123, 27, 166, 57, 175, 64, 218, 104, 90, 169, 144, 101, 69, 193, 118, 87, 44, 180, 21, 19, 153, 69, 89, 
    157, 241, 11, 166, 90, 164, 146, 130, 193, 166, 54, 133, 91, 105, 41, 110, 199, 6, 91, 23, 55, 76, 161, 57, 218, 81, 11, 39, 64, 195, 183, 76, 158, 170, 188, 0, 112, 220, 174, 177, 
    40, 84, 63, 107, 196, 100, 178, 187, 25, 108, 96, 14, 122, 150, 216, 227, 117, 20, 55, 60, 161, 20, 178, 30, 122, 169, 69, 50, 29, 14, 68, 116, 194, 225, 201, 77, 212, 155, 70, 71, 
    190, 57, 119, 90, 111, 134, 117, 235, 235, 36, 217, 251, 76, 219, 209, 181, 208, 247, 172, 104, 35, 4, 5, 140, 15, 227, 1, 204, 87, 211, 62, 107, 42, 190, 189, 87, 32, 207, 52, 206, 
    200, 241, 124, 91, 34, 202, 148, 4, 100, 56, 252, 148, 129, 137, 162, 143, 53, 140, 2, 128, 152, 151, 59, 125, 53, 217, 86, 185, 18, 82, 208, 39, 46, 73, 147, 83, 7, 24, 36, 166, 5, 
    77, 127, 186, 137, 27, 5, 20, 36, 161, 19, 132, 69, 76, 167, 210, 133, 128, 28, 189, 86, 35, 175, 71, 215, 90, 169, 212, 16, 243, 229, 39, 178, 34, 8, 216, 81, 104, 132, 184, 16, 
    138, 10, 166, 190, 114, 117, 237, 7, 31, 199, 20, 55, 176, 69, 80, 183, 185, 119, 120, 8, 197, 145, 211, 21, 155, 91, 65, 156, 246, 58, 153, 122, 198, 118, 99, 25, 173, 180, 83, 11, 
    225, 38, 51, 204, 105, 83, 153, 174, 60, 67, 92, 135, 208, 122, 14, 54, 38, 232, 12, 42, 35, 40, 141, 46, 100, 91, 144, 71, 74, 254, 186, 199, 61, 167, 175, 77, 86, 205, 95, 80, 146, 
    23, 44, 82, 180, 16, 8, 35, 121, 87, 202, 196, 192, 36, 29, 134, 80, 204, 108, 224, 179, 141, 204, 204, 251, 146, 161, 162, 120, 164, 208, 28, 14, 196, 9, 19 ];

//========================================================================================//
// CLIENT SIDE PROTOCOL TEST 1
//========================================================================================//
// STEP 1: SESSION KEY ENCAPSULATION
//========================================================================================//
var time_sum1 = 0;
var c_base64_array = [];
var ss_base64_array = [];
for (var i=0; i<100; i++){ // average of 100 test runs

    // start timer
    var start = performance.now();

    //-------------------------------------------------------
    // 1. (Session) Key Encapsulation (include encoding into timing)
    var c_ss = kyber1024.Encrypt1024(PUBLIC_KEY);
    // convert c to base64 string
    var c_base64 = toBASE64(c_ss[0]);
    // convert ss to base64 string
    var ss_base64 = toBASE64(c_ss[1]);
    //-------------------------------------------------------

    // end timer
    var end = performance.now();

    // add to time sum
    var time1 = end - start;
    time_sum1 += time1 * 100; // convert to microseconds

    // add c and ss to arrays
    c_base64_array[i] = c_base64;
    ss_base64_array[i] = ss_base64;
}
// calculate average time for step 1
var avg_time1 = time_sum1/100;
console.log("Average time step 1: ", avg_time1, " microseconds");

// add ss and c values to text file (for server side testing)
// clear files first
fs.writeFile('../data/client_c.txt', '', (err) => { if (err) throw err; });
fs.writeFile('../data/client_ss.txt', '', (err) => { if (err) throw err; });
for ( var i=0; i<100; i++){
    // write values to file
    fs.appendFileSync('../data/client_c.txt', c_base64_array[i], (err) => { if (err) throw err; });
    fs.appendFileSync('../data/client_c.txt', "\n", (err) => { if (err) throw err; });
}
for ( var i=0; i<100; i++){
    // write values to file
    fs.appendFileSync('../data/client_ss.txt', ss_base64_array[i], (err) => { if (err) throw err; });
    fs.appendFileSync('../data/client_ss.txt', "\n", (err) => { if (err) throw err; });
}
//========================================================================================//
//========================================================================================//

// send c to server

//========================================================================================//


function toBASE64(bytes){
    var string = new Buffer.from(bytes).toString('base64');
    return string;
}

function fromBASE64(string){
    var bytes = [];
    var buffer = new Buffer.from(string, 'base64');
    for (var i=0; i<buffer.length; i++){
        bytes[i] = buffer[i];
    }
    return bytes;
}
