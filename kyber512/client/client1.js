// imports
const { performance } = require('perf_hooks');
const kyber512 = require("./kyber512");
const fs = require('fs');

// server's hardcoded KYBER PUBLIC_KEY (persistent) 
const PUBLIC_KEY = [155, 136, 57, 50, 101, 75, 13, 83, 113, 198, 65, 155, 49, 115, 168, 29, 43, 188, 226, 200, 108, 24, 132, 176, 200, 2, 188, 95, 204, 61, 86, 165, 91, 53, 183, 
    7, 79, 146, 66, 198, 163, 74, 148, 213, 52, 138, 65, 148, 85, 117, 174, 170, 208, 71, 127, 5, 179, 87, 99, 72, 82, 56, 133, 145, 0, 165, 97, 42, 61, 218, 153, 27, 73, 97, 
    117, 221, 228, 130, 212, 26, 138, 115, 2, 38, 166, 155, 45, 129, 115, 60, 8, 162, 115, 251, 181, 48, 155, 104, 35, 133, 149, 193, 255, 165, 38, 104, 68, 9, 153, 147, 91, 115, 
    23, 102, 2, 91, 203, 30, 6, 47, 178, 88, 20, 94, 145, 98, 228, 212, 68, 59, 38, 76, 51, 76, 51, 193, 197, 22, 183, 217, 160, 248, 230, 37, 77, 133, 100, 75, 198, 55, 80, 152, 
    118, 51, 107, 175, 38, 92, 38, 74, 201, 80, 74, 56, 42, 41, 119, 169, 106, 196, 101, 100, 245, 195, 184, 52, 144, 164, 227, 123, 196, 252, 154, 146, 180, 149, 216, 74, 120, 
    186, 151, 161, 2, 147, 9, 148, 33, 31, 238, 113, 119, 193, 121, 122, 128, 90, 67, 164, 154, 115, 218, 19, 30, 196, 98, 188, 144, 184, 193, 120, 27, 105, 32, 243, 194, 90, 154, 
    0, 222, 251, 134, 61, 119, 7, 98, 233, 207, 45, 35, 125, 41, 97, 131, 72, 162, 149, 149, 41, 128, 127, 58, 7, 238, 240, 150, 68, 196, 18, 105, 34, 116, 244, 121, 143, 55, 139, 
    194, 57, 210, 89, 175, 100, 33, 211, 169, 34, 187, 121, 81, 48, 203, 77, 234, 32, 141, 139, 234, 141, 86, 54, 132, 208, 86, 93, 253, 140, 176, 175, 156, 45, 27, 22, 128, 63, 
    208, 155, 65, 236, 26, 43, 24, 191, 190, 183, 21, 0, 160, 77, 24, 39, 13, 76, 219, 124, 249, 242, 116, 179, 168, 189, 25, 155, 135, 49, 170, 78, 22, 2, 15, 115, 33, 110, 236, 
    134, 144, 182, 186, 8, 9, 54, 146, 246, 213, 125, 114, 25, 131, 2, 99, 64, 250, 219, 108, 78, 113, 204, 71, 240, 184, 86, 177, 147, 187, 28, 104, 250, 170, 205, 170, 235, 38, 
    2, 55, 71, 122, 56, 0, 165, 25, 128, 137, 89, 117, 226, 251, 54, 72, 98, 185, 25, 51, 155, 58, 198, 65, 160, 96, 73, 61, 132, 181, 230, 146, 196, 240, 43, 120, 190, 200, 79, 
    108, 244, 3, 108, 119, 93, 104, 204, 178, 22, 193, 199, 47, 67, 57, 42, 228, 41, 238, 69, 185, 35, 210, 148, 60, 85, 21, 69, 201, 115, 39, 150, 119, 0, 7, 29, 147, 228, 84, 
    127, 101, 178, 164, 48, 183, 230, 25, 173, 159, 178, 28, 59, 34, 187, 107, 156, 157, 186, 5, 53, 81, 103, 146, 103, 171, 186, 194, 171, 44, 174, 247, 43, 224, 11, 33, 245, 225, 
    139, 174, 128, 129, 45, 123, 187, 234, 214, 158, 24, 172, 168, 16, 209, 138, 57, 50, 110, 5, 81, 185, 114, 196, 145, 54, 57, 4, 85, 124, 78, 65, 17, 122, 33, 201, 90, 166, 242, 
    154, 199, 149, 184, 182, 60, 56, 133, 97, 117, 51, 184, 202, 235, 103, 150, 241, 197, 104, 197, 236, 111, 135, 213, 178, 132, 152, 205, 26, 213, 156, 144, 75, 33, 169, 185, 8, 
    160, 150, 32, 64, 44, 205, 151, 70, 144, 148, 213, 83, 118, 118, 175, 151, 182, 82, 238, 102, 123, 240, 124, 93, 66, 215, 91, 45, 119, 23, 89, 154, 20, 233, 92, 89, 179, 129, 
    142, 135, 195, 164, 148, 233, 191, 183, 248, 155, 70, 236, 111, 235, 83, 159, 187, 236, 205, 90, 115, 136, 54, 35, 111, 15, 182, 105, 151, 41, 110, 141, 118, 79, 55, 112, 58, 
    179, 56, 176, 87, 213, 195, 137, 69, 205, 125, 180, 153, 76, 188, 84, 140, 84, 89, 194, 247, 203, 47, 86, 82, 88, 164, 114, 213, 181, 54, 104, 50, 10, 165, 148, 205, 196, 194, 
    11, 95, 229, 97, 250, 177, 79, 140, 152, 26, 181, 171, 3, 171, 44, 65, 132, 138, 56, 129, 166, 15, 126, 233, 64, 179, 213, 1, 96, 124, 84, 76, 112, 97, 81, 215, 34, 135, 153, 
    104, 205, 139, 154, 49, 202, 158, 180, 33, 99, 247, 219, 116, 250, 40, 143, 232, 57, 66, 13, 8, 112, 151, 113, 196, 121, 149, 99, 37, 203, 175, 190, 71, 21, 223, 235, 15, 232, 
    136, 123, 182, 83, 104, 169, 167, 231, 234, 57, 6, 14, 114, 13, 246, 90, 187, 124, 240, 236, 242, 116, 12, 223, 112, 120, 125, 140, 252, 243, 73, 163, 43, 140, 36, 196, 21 ];

//========================================================================================//
// CLIENT SIDE PROTOCOL TEST 1
//========================================================================================//
// STEP 1: SESSION KEY ENCAPSULATION
//========================================================================================//
var time_sum1 = 0;
var c_base64_array = [];
var ss_base64_array = [];
for (var i=0; i<100; i++){ // average of 100 test runs

    // start timer
    var start = performance.now();

    //-------------------------------------------------------
    // 1. (Session) Key Encapsulation (include encoding into timing)
    var c_ss = kyber512.Encrypt512(PUBLIC_KEY);
    // convert c to base64 string
    var c_base64 = toBASE64(c_ss[0]);
    // convert ss to base64 string
    var ss_base64 = toBASE64(c_ss[1]);
    //-------------------------------------------------------

    // end timer
    var end = performance.now();

    // add to time sum
    var time1 = end - start;
    time_sum1 += time1 * 100; // convert to microseconds

    // add c and ss to arrays
    c_base64_array[i] = c_base64;
    ss_base64_array[i] = ss_base64;
}
// calculate average time for step 1
var avg_time1 = time_sum1/100;
console.log("Average time step 1: ", avg_time1, " microseconds");

// add ss and c values to text file (for server side testing)
// clear files first
fs.writeFile('../data/client_c.txt', '', (err) => { if (err) throw err; });
fs.writeFile('../data/client_ss.txt', '', (err) => { if (err) throw err; });
for ( var i=0; i<100; i++){
    // write values to file
    fs.appendFileSync('../data/client_c.txt', c_base64_array[i], (err) => { if (err) throw err; });
    fs.appendFileSync('../data/client_c.txt', "\n", (err) => { if (err) throw err; });
}
for ( var i=0; i<100; i++){
    // write values to file
    fs.appendFileSync('../data/client_ss.txt', ss_base64_array[i], (err) => { if (err) throw err; });
    fs.appendFileSync('../data/client_ss.txt', "\n", (err) => { if (err) throw err; });
}
//========================================================================================//
//========================================================================================//

// send c to server

//========================================================================================//


function toBASE64(bytes){
    var string = new Buffer.from(bytes).toString('base64');
    return string;
}

function fromBASE64(string){
    var bytes = [];
    var buffer = new Buffer.from(string, 'base64');
    for (var i=0; i<buffer.length; i++){
        bytes[i] = buffer[i];
    }
    return bytes;
}
