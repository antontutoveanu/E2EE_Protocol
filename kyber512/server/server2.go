package main

import (
	"bufio"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"time"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"
)

func main() {

	MASTER_KEY := [32]byte{48, 124, 87, 188, 181, 244, 165, 54, 249, 79, 112, 76, 201, 137, 208, 20, 14, 79, 102, 56, 19, 51, 125, 166, 52, 49, 19, 37, 194, 15, 99, 168}
	SECRET_KEY := [1632]byte{167, 114, 185, 46, 71, 77, 194, 20, 63, 206, 66, 90, 65, 129, 84, 24, 244, 204, 178, 28, 110, 40, 36, 14, 92, 67, 35, 248, 160, 193, 246, 48,
		106, 26, 145, 16, 117, 40, 71, 242, 185, 29, 81, 66, 186, 194, 16, 106, 99, 215, 108, 28, 161, 183, 123, 84, 189, 43, 39, 61, 138, 48, 56, 66, 213, 207, 100, 246,
		53, 123, 130, 174, 92, 17, 143, 37, 48, 171, 112, 163, 162, 59, 108, 50, 102, 75, 77, 243, 162, 27, 105, 67, 43, 110, 1, 172, 96, 226, 195, 72, 36, 203, 114, 106,
		193, 160, 244, 74, 138, 69, 46, 143, 73, 132, 224, 53, 98, 26, 21, 100, 38, 184, 207, 221, 115, 110, 58, 100, 19, 235, 50, 19, 168, 72, 114, 166, 129, 204, 88, 23,
		114, 46, 183, 108, 150, 179, 139, 75, 71, 187, 11, 42, 127, 89, 216, 183, 92, 148, 202, 102, 105, 32, 42, 107, 96, 28, 33, 6, 181, 75, 129, 215, 163, 173, 129, 58,
		194, 60, 90, 65, 177, 230, 6, 182, 236, 125, 81, 42, 192, 193, 82, 20, 46, 54, 102, 4, 113, 196, 187, 82, 105, 108, 149, 56, 22, 32, 51, 50, 229, 44, 123, 64, 34,
		227, 40, 103, 18, 217, 175, 226, 90, 98, 52, 65, 165, 244, 81, 62, 6, 165, 94, 102, 154, 16, 91, 12, 55, 24, 202, 87, 71, 220, 200, 210, 8, 82, 180, 146, 88, 147,
		129, 2, 42, 118, 187, 190, 145, 103, 235, 60, 36, 209, 234, 148, 66, 202, 96, 195, 179, 5, 124, 200, 155, 112, 128, 58, 67, 197, 14, 11, 76, 138, 99, 65, 198, 78,
		0, 112, 196, 117, 132, 108, 136, 107, 92, 26, 96, 54, 244, 116, 32, 145, 189, 79, 209, 65, 192, 112, 88, 241, 146, 176, 78, 129, 197, 152, 217, 86, 146, 240, 202,
		246, 8, 119, 35, 204, 158, 162, 243, 87, 47, 114, 124, 134, 251, 190, 174, 133, 123, 128, 202, 145, 96, 144, 171, 6, 43, 170, 174, 51, 150, 223, 40, 104, 114, 196,
		207, 103, 26, 166, 131, 155, 33, 213, 199, 103, 112, 80, 91, 118, 129, 77, 170, 203, 149, 28, 55, 59, 224, 170, 81, 169, 102, 17, 33, 198, 191, 8, 97, 45, 184, 123,
		156, 243, 71, 191, 170, 250, 164, 242, 131, 203, 184, 6, 172, 167, 9, 175, 243, 136, 11, 76, 87, 186, 84, 130, 90, 156, 163, 76, 144, 164, 10, 56, 219, 83, 47, 11,
		128, 89, 20, 74, 82, 168, 28, 61, 34, 13, 214, 83, 166, 153, 246, 78, 86, 214, 146, 78, 229, 156, 69, 249, 108, 176, 112, 149, 208, 72, 183, 148, 213, 169, 179, 96,
		101, 196, 165, 6, 242, 177, 87, 230, 37, 184, 32, 117, 33, 118, 148, 177, 235, 87, 27, 195, 170, 73, 242, 240, 157, 206, 0, 114, 136, 67, 29, 5, 53, 112, 54, 88, 70,
		121, 16, 101, 252, 198, 173, 142, 202, 152, 219, 12, 160, 185, 155, 98, 64, 106, 50, 50, 130, 161, 149, 243, 95, 231, 133, 2, 66, 176, 143, 112, 32, 32, 246, 120, 190,
		75, 57, 16, 216, 108, 159, 215, 167, 37, 70, 64, 160, 246, 108, 13, 201, 73, 179, 52, 234, 52, 32, 35, 3, 49, 184, 199, 37, 107, 98, 95, 44, 24, 24, 227, 10, 180, 219,
		96, 112, 96, 146, 186, 230, 66, 187, 81, 153, 233, 217, 120, 200, 220, 126, 27, 103, 181, 42, 56, 180, 90, 195, 34, 14, 162, 78, 140, 103, 13, 185, 32, 111, 178, 10, 13,
		20, 163, 54, 34, 217, 134, 114, 161, 124, 191, 176, 82, 67, 51, 155, 164, 7, 101, 236, 67, 127, 96, 105, 48, 185, 80, 90, 237, 217, 35, 62, 16, 157, 190, 98, 204, 215,
		179, 147, 233, 55, 66, 242, 2, 157, 160, 148, 123, 236, 39, 95, 182, 155, 145, 235, 176, 167, 10, 11, 78, 5, 146, 205, 51, 201, 30, 123, 121, 102, 105, 6, 73, 72, 251,
		107, 222, 80, 205, 74, 172, 38, 152, 166, 48, 103, 92, 50, 180, 71, 57, 167, 230, 51, 145, 39, 70, 128, 194, 61, 131, 19, 120, 17, 57, 196, 252, 101, 145, 240, 213, 76,
		164, 41, 201, 90, 230, 14, 253, 25, 115, 162, 72, 5, 58, 28, 41, 196, 236, 79, 57, 180, 43, 195, 136, 38, 5, 33, 168, 103, 4, 205, 35, 215, 106, 83, 19, 109, 39, 217,
		102, 137, 219, 153, 96, 128, 3, 155, 136, 57, 50, 101, 75, 13, 83, 113, 198, 65, 155, 49, 115, 168, 29, 43, 188, 226, 200, 108, 24, 132, 176, 200, 2, 188, 95, 204, 61,
		86, 165, 91, 53, 183, 7, 79, 146, 66, 198, 163, 74, 148, 213, 52, 138, 65, 148, 85, 117, 174, 170, 208, 71, 127, 5, 179, 87, 99, 72, 82, 56, 133, 145, 0, 165, 97, 42,
		61, 218, 153, 27, 73, 97, 117, 221, 228, 130, 212, 26, 138, 115, 2, 38, 166, 155, 45, 129, 115, 60, 8, 162, 115, 251, 181, 48, 155, 104, 35, 133, 149, 193, 255, 165, 38,
		104, 68, 9, 153, 147, 91, 115, 23, 102, 2, 91, 203, 30, 6, 47, 178, 88, 20, 94, 145, 98, 228, 212, 68, 59, 38, 76, 51, 76, 51, 193, 197, 22, 183, 217, 160, 248, 230, 37,
		77, 133, 100, 75, 198, 55, 80, 152, 118, 51, 107, 175, 38, 92, 38, 74, 201, 80, 74, 56, 42, 41, 119, 169, 106, 196, 101, 100, 245, 195, 184, 52, 144, 164, 227, 123, 196,
		252, 154, 146, 180, 149, 216, 74, 120, 186, 151, 161, 2, 147, 9, 148, 33, 31, 238, 113, 119, 193, 121, 122, 128, 90, 67, 164, 154, 115, 218, 19, 30, 196, 98, 188, 144,
		184, 193, 120, 27, 105, 32, 243, 194, 90, 154, 0, 222, 251, 134, 61, 119, 7, 98, 233, 207, 45, 35, 125, 41, 97, 131, 72, 162, 149, 149, 41, 128, 127, 58, 7, 238, 240,
		150, 68, 196, 18, 105, 34, 116, 244, 121, 143, 55, 139, 194, 57, 210, 89, 175, 100, 33, 211, 169, 34, 187, 121, 81, 48, 203, 77, 234, 32, 141, 139, 234, 141, 86, 54,
		132, 208, 86, 93, 253, 140, 176, 175, 156, 45, 27, 22, 128, 63, 208, 155, 65, 236, 26, 43, 24, 191, 190, 183, 21, 0, 160, 77, 24, 39, 13, 76, 219, 124, 249, 242, 116,
		179, 168, 189, 25, 155, 135, 49, 170, 78, 22, 2, 15, 115, 33, 110, 236, 134, 144, 182, 186, 8, 9, 54, 146, 246, 213, 125, 114, 25, 131, 2, 99, 64, 250, 219, 108, 78,
		113, 204, 71, 240, 184, 86, 177, 147, 187, 28, 104, 250, 170, 205, 170, 235, 38, 2, 55, 71, 122, 56, 0, 165, 25, 128, 137, 89, 117, 226, 251, 54, 72, 98, 185, 25, 51,
		155, 58, 198, 65, 160, 96, 73, 61, 132, 181, 230, 146, 196, 240, 43, 120, 190, 200, 79, 108, 244, 3, 108, 119, 93, 104, 204, 178, 22, 193, 199, 47, 67, 57, 42, 228, 41,
		238, 69, 185, 35, 210, 148, 60, 85, 21, 69, 201, 115, 39, 150, 119, 0, 7, 29, 147, 228, 84, 127, 101, 178, 164, 48, 183, 230, 25, 173, 159, 178, 28, 59, 34, 187, 107,
		156, 157, 186, 5, 53, 81, 103, 146, 103, 171, 186, 194, 171, 44, 174, 247, 43, 224, 11, 33, 245, 225, 139, 174, 128, 129, 45, 123, 187, 234, 214, 158, 24, 172, 168, 16,
		209, 138, 57, 50, 110, 5, 81, 185, 114, 196, 145, 54, 57, 4, 85, 124, 78, 65, 17, 122, 33, 201, 90, 166, 242, 154, 199, 149, 184, 182, 60, 56, 133, 97, 117, 51, 184, 202,
		235, 103, 150, 241, 197, 104, 197, 236, 111, 135, 213, 178, 132, 152, 205, 26, 213, 156, 144, 75, 33, 169, 185, 8, 160, 150, 32, 64, 44, 205, 151, 70, 144, 148, 213, 83,
		118, 118, 175, 151, 182, 82, 238, 102, 123, 240, 124, 93, 66, 215, 91, 45, 119, 23, 89, 154, 20, 233, 92, 89, 179, 129, 142, 135, 195, 164, 148, 233, 191, 183, 248, 155,
		70, 236, 111, 235, 83, 159, 187, 236, 205, 90, 115, 136, 54, 35, 111, 15, 182, 105, 151, 41, 110, 141, 118, 79, 55, 112, 58, 179, 56, 176, 87, 213, 195, 137, 69, 205, 125,
		180, 153, 76, 188, 84, 140, 84, 89, 194, 247, 203, 47, 86, 82, 88, 164, 114, 213, 181, 54, 104, 50, 10, 165, 148, 205, 196, 194, 11, 95, 229, 97, 250, 177, 79, 140, 152,
		26, 181, 171, 3, 171, 44, 65, 132, 138, 56, 129, 166, 15, 126, 233, 64, 179, 213, 1, 96, 124, 84, 76, 112, 97, 81, 215, 34, 135, 153, 104, 205, 139, 154, 49, 202, 158, 180,
		33, 99, 247, 219, 116, 250, 40, 143, 232, 57, 66, 13, 8, 112, 151, 113, 196, 121, 149, 99, 37, 203, 175, 190, 71, 21, 223, 235, 15, 232, 136, 123, 182, 83, 104, 169, 167,
		231, 234, 57, 6, 14, 114, 13, 246, 90, 187, 124, 240, 236, 242, 116, 12, 223, 112, 120, 125, 140, 252, 243, 73, 163, 43, 140, 36, 196, 21, 62, 144, 128, 153, 4, 4, 124,
		20, 110, 59, 201, 201, 186, 19, 31, 57, 230, 93, 165, 36, 90, 235, 113, 87, 173, 164, 168, 104, 3, 193, 31, 61, 22, 250, 205, 251, 33, 209, 163, 33, 174, 132, 254, 222,
		50, 196, 143, 212, 39, 241, 0, 179, 176, 249, 202, 50, 159, 47, 212, 126, 29, 27, 2, 224}
	/*
		PUBLIC_KEY := [800]byte{155, 136, 57, 50, 101, 75, 13, 83, 113, 198, 65, 155, 49, 115, 168, 29, 43, 188, 226, 200, 108, 24, 132, 176, 200, 2, 188, 95, 204, 61, 86, 165,
			91, 53, 183, 7, 79, 146, 66, 198, 163, 74, 148, 213, 52, 138, 65, 148, 85, 117, 174, 170, 208, 71, 127, 5, 179, 87, 99, 72, 82, 56, 133, 145, 0, 165, 97, 42, 61, 218,
			153, 27, 73, 97, 117, 221, 228, 130, 212, 26, 138, 115, 2, 38, 166, 155, 45, 129, 115, 60, 8, 162, 115, 251, 181, 48, 155, 104, 35, 133, 149, 193, 255, 165, 38, 104,
			68, 9, 153, 147, 91, 115, 23, 102, 2, 91, 203, 30, 6, 47, 178, 88, 20, 94, 145, 98, 228, 212, 68, 59, 38, 76, 51, 76, 51, 193, 197, 22, 183, 217, 160, 248, 230, 37,
			77, 133, 100, 75, 198, 55, 80, 152, 118, 51, 107, 175, 38, 92, 38, 74, 201, 80, 74, 56, 42, 41, 119, 169, 106, 196, 101, 100, 245, 195, 184, 52, 144, 164, 227, 123,
			196, 252, 154, 146, 180, 149, 216, 74, 120, 186, 151, 161, 2, 147, 9, 148, 33, 31, 238, 113, 119, 193, 121, 122, 128, 90, 67, 164, 154, 115, 218, 19, 30, 196, 98,
			188, 144, 184, 193, 120, 27, 105, 32, 243, 194, 90, 154, 0, 222, 251, 134, 61, 119, 7, 98, 233, 207, 45, 35, 125, 41, 97, 131, 72, 162, 149, 149, 41, 128, 127, 58,
			7, 238, 240, 150, 68, 196, 18, 105, 34, 116, 244, 121, 143, 55, 139, 194, 57, 210, 89, 175, 100, 33, 211, 169, 34, 187, 121, 81, 48, 203, 77, 234, 32, 141, 139, 234,
			141, 86, 54, 132, 208, 86, 93, 253, 140, 176, 175, 156, 45, 27, 22, 128, 63, 208, 155, 65, 236, 26, 43, 24, 191, 190, 183, 21, 0, 160, 77, 24, 39, 13, 76, 219, 124,
			249, 242, 116, 179, 168, 189, 25, 155, 135, 49, 170, 78, 22, 2, 15, 115, 33, 110, 236, 134, 144, 182, 186, 8, 9, 54, 146, 246, 213, 125, 114, 25, 131, 2, 99, 64, 250,
			219, 108, 78, 113, 204, 71, 240, 184, 86, 177, 147, 187, 28, 104, 250, 170, 205, 170, 235, 38, 2, 55, 71, 122, 56, 0, 165, 25, 128, 137, 89, 117, 226, 251, 54, 72, 98,
			185, 25, 51, 155, 58, 198, 65, 160, 96, 73, 61, 132, 181, 230, 146, 196, 240, 43, 120, 190, 200, 79, 108, 244, 3, 108, 119, 93, 104, 204, 178, 22, 193, 199, 47, 67,
			57, 42, 228, 41, 238, 69, 185, 35, 210, 148, 60, 85, 21, 69, 201, 115, 39, 150, 119, 0, 7, 29, 147, 228, 84, 127, 101, 178, 164, 48, 183, 230, 25, 173, 159, 178, 28,
			59, 34, 187, 107, 156, 157, 186, 5, 53, 81, 103, 146, 103, 171, 186, 194, 171, 44, 174, 247, 43, 224, 11, 33, 245, 225, 139, 174, 128, 129, 45, 123, 187, 234, 214,
			158, 24, 172, 168, 16, 209, 138, 57, 50, 110, 5, 81, 185, 114, 196, 145, 54, 57, 4, 85, 124, 78, 65, 17, 122, 33, 201, 90, 166, 242, 154, 199, 149, 184, 182, 60, 56,
			133, 97, 117, 51, 184, 202, 235, 103, 150, 241, 197, 104, 197, 236, 111, 135, 213, 178, 132, 152, 205, 26, 213, 156, 144, 75, 33, 169, 185, 8, 160, 150, 32, 64, 44,
			205, 151, 70, 144, 148, 213, 83, 118, 118, 175, 151, 182, 82, 238, 102, 123, 240, 124, 93, 66, 215, 91, 45, 119, 23, 89, 154, 20, 233, 92, 89, 179, 129, 142, 135, 195,
			164, 148, 233, 191, 183, 248, 155, 70, 236, 111, 235, 83, 159, 187, 236, 205, 90, 115, 136, 54, 35, 111, 15, 182, 105, 151, 41, 110, 141, 118, 79, 55, 112, 58, 179, 56,
			176, 87, 213, 195, 137, 69, 205, 125, 180, 153, 76, 188, 84, 140, 84, 89, 194, 247, 203, 47, 86, 82, 88, 164, 114, 213, 181, 54, 104, 50, 10, 165, 148, 205, 196, 194,
			11, 95, 229, 97, 250, 177, 79, 140, 152, 26, 181, 171, 3, 171, 44, 65, 132, 138, 56, 129, 166, 15, 126, 233, 64, 179, 213, 1, 96, 124, 84, 76, 112, 97, 81, 215, 34,
			135, 153, 104, 205, 139, 154, 49, 202, 158, 180, 33, 99, 247, 219, 116, 250, 40, 143, 232, 57, 66, 13, 8, 112, 151, 113, 196, 121, 149, 99, 37, 203, 175, 190, 71, 21,
			223, 235, 15, 232, 136, 123, 182, 83, 104, 169, 167, 231, 234, 57, 6, 14, 114, 13, 246, 90, 187, 124, 240, 236, 242, 116, 12, 223, 112, 120, 125, 140, 252, 243, 73,
			163, 43, 140, 36, 196, 21}
	*/
	//========================================================================================//
	// SERVER SIDE PROTOCOL TEST 2
	//========================================================================================//
	// open plaintext data file and read into byte array
	PLAINTEXT, err := ioutil.ReadFile("../data/plaintext.txt")
	if err != nil {
		fmt.Print(err)
	}
	// encrypt plaintext data with master key
	CIPHERTEXT := AES256GCM_ENCRYPT(MASTER_KEY, PLAINTEXT)
	// save ciphertext data to file as base64 string
	outfile, err := os.Create("../data/ciphertext.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer outfile.Close()
	// bytes to base64
	CIPHERTEXT_base64 := base64.StdEncoding.EncodeToString(CIPHERTEXT)
	_, err1 := outfile.WriteString(CIPHERTEXT_base64)
	if err1 != nil {
		log.Fatal(err1)
	}
	//========================================================================================//
	// STEP 2: SESSION KEY DECAPSULATION
	//========================================================================================//
	// read c values from client into array
	c_base64_array := make([]string, 0)
	// open client_c.txt file
	file, err := os.Open("../data/client_c.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	// read base64 strings into array
	scanner := bufio.NewScanner(file)
	scanner.Split(bufio.ScanWords)
	for scanner.Scan() {
		c_base64 := scanner.Text()
		c_base64_array = append(c_base64_array, c_base64)
	}
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
	// for each c value from client (100 values)
	time_sum2 := 0
	SESSION_KEY_base64_array := make([]string, 0)
	for i := 0; i < 100; i++ { // average of 100 test runs

		// start timer
		start := time.Now()

		//-------------------------------------------------------
		// get c from c_base64_array and convert to byte array
		c_byte, _ := base64.StdEncoding.DecodeString(c_base64_array[i])
		var c [768]byte
		copy(c[:], c_byte)
		// 2. (Session) Key Decapsulation
		SESSION_KEY, _ := kyberk2so.KemDecrypt512(c, SECRET_KEY)
		// convert session key to base64 string
		SESSION_KEY_base64 := base64.StdEncoding.EncodeToString(SESSION_KEY[:])
		//-------------------------------------------------------

		// end timer
		time2 := time.Since(start)

		// add to time sum
		time_sum2 += int(time2.Microseconds()) // convert to microseconds

		// append to array
		SESSION_KEY_base64_array = append(SESSION_KEY_base64_array, SESSION_KEY_base64)
	}
	// calculate average time for step 2
	avg_time2 := float64(time_sum2) / 100.0
	fmt.Println("Average time step 2: ", avg_time2, " microseconds")

	// write session keys to server_ss.txt
	outfile2, err := os.Create("../data/server_ss.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer outfile2.Close()
	// write to file
	for i := 0; i < 100; i++ {
		_, err1 := outfile2.WriteString(SESSION_KEY_base64_array[i] + "\n")
		if err1 != nil {
			log.Fatal(err1)
		}
	}

	time_sum3 := 0
	ENC_MASTER_KEY_base64_array := make([]string, 0)
	for i := 0; i < 100; i++ { // average of 100 test runs

		// start timer
		start := time.Now()

		//-------------------------------------------------------
		// decode session key into byte array
		SESSION_KEY_byte, _ := base64.StdEncoding.DecodeString(SESSION_KEY_base64_array[i])
		var SESSION_KEY [32]byte
		copy(SESSION_KEY[:], SESSION_KEY_byte)
		// 3. Encrypt MASTER_KEY with SESSION_KEY
		ENC_MASTER_KEY := AES256GCM_ENCRYPT(SESSION_KEY, MASTER_KEY[:])
		// convert ENC_MASTER_KEY to base64 string and append to array
		ENC_MASTER_KEY_base64 := base64.StdEncoding.EncodeToString(ENC_MASTER_KEY[:])
		//-------------------------------------------------------

		// end timer
		time3 := time.Since(start)

		// add to time sum
		time_sum3 += int(time3.Microseconds()) // convert to microseconds

		// append to array
		ENC_MASTER_KEY_base64_array = append(ENC_MASTER_KEY_base64_array, ENC_MASTER_KEY_base64)
	}
	// calculate average time for step 3
	avg_time3 := float64(time_sum3) / 100.0
	fmt.Println("Average time step 3: ", avg_time3, " microseconds")

	// add to text file (for client side testing)
	// open server_enc_mk.txt file
	file1, err1 := os.Create("../data/server_enc_mk.txt")
	if err1 != nil {
		log.Fatal(err1)
	}
	defer file1.Close()
	// write to file
	for i := 0; i < 100; i++ {
		_, err1 := file1.WriteString(ENC_MASTER_KEY_base64_array[i] + "\n")
		if err1 != nil {
			log.Fatal(err1)
		}
	}

}

// bytes as input and output
func AES256GCM_ENCRYPT(KEY [32]byte, PLAINTEXT []byte) []byte {

	block, err := aes.NewCipher(KEY[:])
	if err != nil {
		panic(err)
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err)
	}
	nonce := make([]byte, gcm.NonceSize())
	_, err = io.ReadFull(rand.Reader, nonce)
	if err != nil {
		panic(err)
	}
	CIPHERTEXT := gcm.Seal(nonce, nonce, []byte(PLAINTEXT), nil)

	return CIPHERTEXT
}
