// imports
const { performance } = require('perf_hooks');
const kyber768 = require("./kyber768");
const fs = require('fs');

// server's hardcoded KYBER PUBLIC_KEY (persistent) 
const PUBLIC_KEY = [132, 21, 195, 48, 252, 196, 151, 165, 190, 179, 105, 142, 0, 59, 41, 3, 85, 153, 3, 35, 194, 71, 161, 40, 162, 196, 136, 96, 252, 166, 0, 151, 0, 
    133, 35, 62, 161, 135, 23, 242, 204, 35, 151, 52, 153, 251, 42, 195, 130, 34, 85, 243, 71, 135, 184, 91, 149, 190, 0, 149, 30, 0, 193, 129, 2, 61, 100, 73, 101, 
    106, 54, 6, 95, 53, 60, 189, 40, 94, 135, 39, 33, 113, 23, 126, 243, 137, 205, 219, 108, 109, 78, 114, 142, 224, 150, 53, 210, 118, 23, 133, 32, 110, 120, 204, 
    149, 68, 58, 189, 122, 234, 129, 207, 114, 105, 255, 117, 200, 77, 41, 155, 94, 108, 206, 38, 240, 148, 99, 155, 65, 150, 249, 172, 168, 171, 23, 56, 200, 129, 
    65, 188, 38, 251, 55, 14, 195, 86, 107, 83, 229, 174, 6, 131, 143, 181, 64, 134, 57, 224, 83, 136, 138, 166, 180, 70, 94, 145, 56, 52, 95, 83, 10, 174, 113, 37, 
    174, 170, 27, 6, 44, 107, 138, 34, 4, 62, 128, 143, 99, 149, 144, 167, 151, 177, 178, 128, 56, 19, 168, 112, 185, 200, 9, 185, 177, 30, 235, 140, 120, 170, 211, 
    141, 95, 92, 194, 57, 23, 13, 69, 40, 125, 221, 156, 183, 206, 138, 10, 108, 34, 61, 102, 187, 201, 159, 54, 167, 48, 236, 118, 93, 132, 202, 114, 129, 126, 5, 8, 
    62, 105, 56, 114, 210, 35, 120, 190, 185, 89, 61, 117, 93, 248, 150, 176, 114, 92, 110, 70, 204, 41, 149, 138, 87, 59, 203, 75, 181, 4, 83, 59, 160, 142, 192, 92, 
    183, 203, 112, 59, 101, 204, 158, 212, 108, 100, 182, 33, 158, 227, 135, 174, 162, 233, 82, 224, 8, 106, 176, 186, 137, 164, 236, 85, 202, 224, 29, 105, 224, 160, 
    208, 7, 179, 104, 247, 21, 80, 106, 45, 183, 128, 98, 30, 124, 34, 112, 199, 73, 187, 19, 40, 211, 108, 39, 172, 235, 207, 209, 119, 77, 202, 53, 9, 153, 181, 66, 
    57, 32, 171, 166, 32, 122, 163, 208, 156, 215, 24, 128, 5, 99, 156, 32, 5, 183, 191, 81, 41, 173, 164, 170, 139, 129, 178, 188, 19, 29, 150, 7, 89, 248, 117, 88, 
    247, 87, 176, 193, 196, 104, 162, 25, 207, 90, 105, 97, 85, 204, 191, 16, 195, 97, 215, 36, 196, 252, 37, 138, 160, 196, 137, 140, 138, 36, 81, 56, 31, 49, 180, 123, 
    207, 40, 175, 40, 58, 125, 88, 36, 32, 243, 197, 100, 139, 92, 30, 155, 202, 109, 22, 1, 42, 52, 116, 155, 169, 166, 61, 41, 25, 187, 123, 181, 13, 216, 105, 159, 
    126, 113, 191, 71, 41, 181, 253, 105, 187, 147, 117, 124, 254, 193, 138, 122, 235, 13, 3, 152, 125, 60, 251, 109, 131, 168, 70, 199, 42, 86, 156, 177, 64, 0, 61, 22, 
    88, 240, 48, 88, 91, 122, 200, 1, 32, 164, 36, 74, 141, 49, 53, 94, 11, 14, 33, 41, 124, 228, 9, 136, 160, 203, 11, 238, 59, 186, 8, 195, 82, 169, 176, 170, 154, 233, 
    82, 254, 10, 192, 148, 233, 128, 225, 201, 43, 79, 248, 43, 69, 156, 95, 113, 70, 95, 157, 11, 173, 230, 107, 176, 138, 107, 168, 174, 160, 139, 30, 135, 87, 157, 112, 
    204, 102, 66, 102, 233, 234, 6, 110, 107, 143, 42, 139, 140, 236, 21, 130, 240, 119, 78, 113, 220, 66, 57, 133, 66, 241, 218, 103, 128, 204, 32, 109, 246, 92, 185, 22, 
    181, 232, 226, 181, 74, 80, 48, 35, 229, 94, 20, 151, 99, 46, 240, 58, 49, 21, 138, 14, 98, 142, 119, 228, 112, 86, 163, 122, 24, 137, 125, 155, 134, 89, 38, 183, 84, 
    160, 148, 42, 227, 34, 125, 196, 8, 192, 136, 215, 49, 107, 172, 22, 56, 224, 98, 234, 169, 14, 65, 203, 100, 63, 80, 105, 206, 72, 42, 61, 165, 160, 179, 103, 59, 162, 
    67, 99, 225, 71, 149, 128, 179, 158, 193, 151, 201, 255, 245, 62, 124, 177, 203, 247, 16, 154, 37, 166, 140, 42, 170, 19, 9, 90, 61, 212, 92, 62, 143, 197, 192, 175, 98, 
    155, 150, 19, 14, 15, 129, 79, 49, 35, 30, 1, 193, 98, 15, 129, 182, 93, 71, 158, 104, 4, 128, 64, 231, 91, 26, 199, 103, 150, 178, 2, 138, 232, 52, 213, 203, 178, 10, 
    101, 84, 189, 242, 68, 144, 113, 34, 242, 225, 136, 173, 131, 7, 86, 86, 45, 49, 65, 189, 229, 172, 143, 104, 183, 122, 21, 2, 41, 60, 67, 61, 174, 55, 127, 219, 249, 
    153, 244, 129, 177, 45, 225, 100, 132, 65, 21, 115, 140, 164, 88, 96, 22, 187, 250, 10, 244, 41, 75, 62, 170, 78, 202, 34, 4, 70, 22, 158, 145, 104, 3, 69, 183, 133, 
    193, 48, 150, 63, 60, 25, 128, 170, 162, 203, 202, 107, 196, 176, 67, 247, 156, 130, 93, 134, 184, 64, 76, 60, 168, 211, 171, 126, 112, 144, 66, 217, 196, 174, 56, 192, 
    107, 90, 80, 26, 140, 70, 57, 181, 199, 107, 128, 138, 95, 115, 59, 13, 34, 34, 219, 70, 185, 180, 12, 21, 117, 21, 129, 204, 220, 87, 50, 26, 171, 188, 70, 188, 136, 
    182, 22, 113, 203, 2, 213, 89, 87, 251, 25, 192, 115, 70, 126, 45, 216, 77, 197, 38, 74, 155, 19, 65, 178, 155, 145, 119, 162, 5, 98, 34, 30, 55, 209, 44, 94, 2, 14, 
    75, 96, 200, 129, 19, 142, 251, 197, 25, 169, 100, 141, 27, 140, 121, 126, 201, 156, 154, 97, 29, 76, 83, 119, 201, 236, 126, 19, 37, 44, 97, 121, 56, 146, 103, 189, 69, 
    170, 127, 65, 2, 193, 12, 81, 36, 98, 90, 88, 179, 89, 149, 239, 88, 21, 22, 162, 134, 196, 140, 173, 130, 182, 180, 199, 231, 162, 156, 243, 156, 15, 16, 199, 105, 179, 
    49, 93, 113, 15, 46, 129, 202, 148, 53, 133, 133, 64, 190, 119, 136, 40, 245, 192, 16, 219, 112, 191, 243, 64, 166, 69, 59, 187, 94, 112, 147, 125, 180, 188, 10, 240, 
    105, 186, 9, 27, 230, 131, 201, 52, 161, 172, 197, 0, 118, 43, 123, 132, 166, 225, 205, 115, 25, 104, 80, 69, 171, 146, 213, 27, 118, 147, 18, 44, 112, 32, 180, 10, 134, 
    61, 186, 104, 58, 251, 19, 233, 231, 93, 223, 11, 157, 187, 122, 80, 129, 84, 207, 74, 171, 143, 205, 250, 184, 95, 236, 181, 190, 7, 155, 13, 21, 154, 70, 203, 16, 157, 
    144, 9, 31, 72, 83, 240, 216, 36, 58, 130, 140, 146, 178, 168, 199, 178, 95, 121, 187, 95, 158, 165, 155, 88, 220, 95, 124, 163, 112, 44, 85, 65, 177, 208, 117, 56, 83, 
    92, 178, 212, 62, 135, 84, 118, 55, 39, 67, 126, 213, 112, 79, 104, 184, 239, 22, 152, 53, 234, 39, 64, 232 ];

//========================================================================================//
// CLIENT SIDE PROTOCOL TEST 1
//========================================================================================//
// STEP 1: SESSION KEY ENCAPSULATION
//========================================================================================//
var time_sum1 = 0;
var c_base64_array = [];
var ss_base64_array = [];
for (var i=0; i<100; i++){ // average of 100 test runs

    // start timer
    var start = performance.now();

    //-------------------------------------------------------
    // 1. (Session) Key Encapsulation (include encoding into timing)
    var c_ss = kyber768.Encrypt768(PUBLIC_KEY);
    // convert c to base64 string
    var c_base64 = toBASE64(c_ss[0]);
    // convert ss to base64 string
    var ss_base64 = toBASE64(c_ss[1]);
    //-------------------------------------------------------

    // end timer
    var end = performance.now();

    // add to time sum
    var time1 = end - start;
    time_sum1 += time1 * 100; // convert to microseconds

    // add c and ss to arrays
    c_base64_array[i] = c_base64;
    ss_base64_array[i] = ss_base64;
}
// calculate average time for step 1
var avg_time1 = time_sum1/100;
console.log("Average time step 1: ", avg_time1, " microseconds");

// add ss and c values to text file (for server side testing)
// clear files first
fs.writeFile('../data/client_c.txt', '', (err) => { if (err) throw err; });
fs.writeFile('../data/client_ss.txt', '', (err) => { if (err) throw err; });
for ( var i=0; i<100; i++){
    // write values to file
    fs.appendFileSync('../data/client_c.txt', c_base64_array[i], (err) => { if (err) throw err; });
    fs.appendFileSync('../data/client_c.txt', "\n", (err) => { if (err) throw err; });
}
for ( var i=0; i<100; i++){
    // write values to file
    fs.appendFileSync('../data/client_ss.txt', ss_base64_array[i], (err) => { if (err) throw err; });
    fs.appendFileSync('../data/client_ss.txt', "\n", (err) => { if (err) throw err; });
}
//========================================================================================//
//========================================================================================//

// send c to server

//========================================================================================//


function toBASE64(bytes){
    var string = new Buffer.from(bytes).toString('base64');
    return string;
}

function fromBASE64(string){
    var bytes = [];
    var buffer = new Buffer.from(string, 'base64');
    for (var i=0; i<buffer.length; i++){
        bytes[i] = buffer[i];
    }
    return bytes;
}
